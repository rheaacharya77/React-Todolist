{"version":3,"sources":["logo.svg","ListItems.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ListItems","props","listItems","items","map","item","className","key","text","duration","easing","App","state","currentItem","handleInput","bind","addItem","e","this","setState","target","value","Date","now","preventDefault","newItem","console","log","id","onSubmit","type","placeholder","onChange","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8IAAAA,EAAOC,QAAU,IAA0B,kC,yLC0B5BC,MAtBf,SAAmBC,GAEX,IACMC,EADQD,EAAME,MACIC,KAAI,SAAAC,GAEpB,OAAO,yBAAKC,UAAU,OAAOC,IAAI,YACjC,2BAAIF,EAAKG,UAKjB,OAAQ,6BAEN,kBAAC,IAAD,CAAUC,SAAU,IAAKC,OAAO,eAC7BR,KCiDMS,E,kDA7DhB,WAAYV,GAAO,IAAD,8BACd,cAAMA,IACDW,MAAO,CACVT,MAAO,GACPU,YAAY,CACVL,KAAM,GACND,IAAI,KAKN,EAAKO,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBAZH,E,wDAgBEE,GACJC,KAAKC,SAAS,CACdN,YAAa,CACbL,KAAMS,EAAEG,OAAOC,MACfd,IAAKe,KAAKC,W,8BAKXN,GACRA,EAAEO,iBACF,IAAMC,EAAUP,KAAKN,MAAMC,YAE3B,GADAa,QAAQC,IAAIF,GACO,KAAhBA,EAAQjB,KAAW,CACtB,IAAML,EAAK,sBAAOe,KAAKN,MAAMT,OAAlB,CAAyBsB,IACpCP,KAAKC,SAAS,CACdhB,MAAOA,EACPU,YAAY,CACZL,KAAK,GACLD,IAAI,S,+BAWR,OACE,yBAAKD,UAAU,OACb,gCACA,0BAAMsB,GAAI,YAAYC,SAAUX,KAAKF,SACnC,2BAAOc,KAAK,OAAOC,YAAY,cAC/BV,MAAOH,KAAKN,MAAMC,YAAYL,KAC9BwB,SAAUd,KAAKJ,cACf,4BAAQgB,KAAK,UAAb,SAGJ,kBAAC,EAAD,CAAW3B,MAASe,KAAKN,MAAMT,a,GAzDrB8B,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,c","file":"static/js/main.d4769ec0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './ListItems.css';\r\nimport FlipMove from 'react-flip-move';\r\n\r\nfunction ListItems(props) {\r\n   \r\n        const items = props.items;\r\n        const listItems = items.map(item =>\r\n            {\r\n                return <div className=\"list\" key=\"item.key\">\r\n                <p>{item.text}</p>\r\n\r\n                </div>\r\n                    \r\n            })\r\n        return( <div>\r\n\r\n          <FlipMove duration={300} easing=\"ease-in-out\">\r\n            {listItems}\r\n           </FlipMove>\r\n\r\n            </div>\r\n              )\r\n\r\n}\r\n\r\nexport default ListItems;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ListItems from './ListItems'\n\nclass App extends React.Component {\n   constructor(props){\n       super(props);\n       this.state ={\n         items: [],\n         currentItem:{\n           text: '',\n           key:''\n         }\n\n        }\n\n         this.handleInput = this.handleInput.bind(this);\n         this.addItem = this.addItem.bind(this);\n      \n}\n\n           handleInput(e){\n                   this.setState({\n                   currentItem: {\n                   text: e.target.value,\n                   key: Date.now()\n                   }\n                               })\n                           }\n\n          addItem(e){\n          e.preventDefault();\n          const newItem = this.state.currentItem;\n          console.log(newItem);\n          if(newItem.text !==\"\"){\n          const items = [...this.state.items, newItem];\n          this.setState({\n          items: items,\n          currentItem:{\n          text:'',\n          key:''\n          }\n        })\n                          \n      }\n                          \n    }\n\n              \n\n    render(){\n      return (\n        <div className=\"App\">\n          <header>\n          <form id =\"todo-form\" onSubmit={this.addItem}>\n            <input type=\"text\" placeholder=\"Enter Tasks\" \n            value={this.state.currentItem.text} \n            onChange={this.handleInput}/>\n            <button type=\"submit\">Add</button>\n          </form>\n        </header>\n        <ListItems items = {this.state.items}></ListItems>\n        </div>\n      );\n       }\n    }\n    export default App;     \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}